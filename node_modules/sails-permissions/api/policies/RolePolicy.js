/**
 * RolePolicy
 * @depends PermissionPolicy
 * @depends OwnerPolicy
 * @depends ModelPolicy
 *
 * Verify that User is satisfactorily related to the Object's owner.
 */
module.exports = function (req, res, next) {
  var relations = _.groupBy(req.permissions, 'relation');
  var action = PermissionService.getMethod(req.method);

  // continue if there exist role Permissions which grant the asserted privilege
  if (!_.isEmpty(relations.role)) {
    return next();
  }

  // inject 'owner' as a query criterion and continue if we are not mutating
  // an existing object
  if (!_.contains([ 'update', 'delete' ], action)) {
    req.query.owner = req.user.id;
    _.isObject(req.body) && (req.body.owner = req.user.id);
    if(req.params.id) {
      CheckOwnerAndAuthorizedOwner();
    } else {
      return next();
    }
  } else {
      PermissionService.findTargetObjects(req)
      .then(function (objects) {
        if (PermissionService.hasForeignObjects(objects, req.user)) {
          res.badRequest({ error: 'Cannot perform action ['+ action +'] on foreign object' });
        }
        else {
          next();
        }
      })
      .catch(next);
  }

  //For resource can be actioned by owner and authorized owner
  function CheckOwnerAndAuthorizedOwner(){
      if (!_.isEmpty(relations.owner) && !_.isEmpty(relations.authowner)) {
      PermissionService.findTargetObjects(req)
      .then(function (objects) {
        if (PermissionService.hasForeignObjects(objects, req.user) && 
            PermissionService.hasUnauthorizedObjects(objects, req.user)) {
          res.badRequest({ error: 'Cannot perform action ['+ action +'] on foreign and unauthorizedobject' });
        }
        else {
          next();
        }
      })
      .catch(next);
    }  else {
      PermissionService.findTargetObjects(req)
        .then(function (objects) {
          if (PermissionService.hasForeignObjects(objects, req.user)) {
            res.badRequest({ error: 'Cannot perform action ['+ action +'] on foreign object' });
          }
          else {
            next();
          }
        })
        .catch(next);    
    }
  }

};
